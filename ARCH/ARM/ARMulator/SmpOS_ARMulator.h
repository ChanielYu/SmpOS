
#if !defined __ARMULATOR_H__
#define __ARMULATOR_H__

#if 0 /* For assembler */
#define IRQ_STATUS 		0x0A000000
#define IRQ_RAWSTATUS 	0x0A000004
#define IRQ_ENABLE 		0x0A000008
#define IRQ_DISABLE 	0x0A00000C
#define IRQ_SOFT 		0x0A000010

#define FIR_STATUS 		0x0A000100
#define FIR_RAWSTATUS 	0x0A000104
#define FIR_ENABLE 		0x0A000108
#define FIR_DISABLE 	0x0A00010C
#define FIR_SOFT 		0x0A000110

#define TIMER_LOAD 		0x0A800000
#define TIMER_VALUE 	0x0A800004
#define TIMER_CTRL 		0x0A800008
#define TIMER_CLEAR 	0x0A80000C
#endif

typedef volatile UINT32 ARMREG;

#define IRQ_BASE 		0x0A000000
#define FIQ_BASE 		0x0A000100

typedef struct __REGINTCTRL
{
	ARMREG STATUS;
	ARMREG RAWSTATUS;
	ARMREG ENABLE;
	ARMREG DISABLE;
	ARMREG SOFTINT;
} REGINTCTRL,*PREGINTCTRL;

#define IRQCTRL_FIQ 	0x00000001
#define IRQCTRL_SOFT 	0x00000002
#define IRQCTRL_CCRX 	0x00000004
#define IRQCTRL_CCTX 	0x00000008
#define IRQCTRL_TMR1 	0x00000010
#define IRQCTRL_TMR2 	0x00000020

#define TIMER1_BASE 		0x0A800000
#define TIMER2_BASE 		0x0A800020

typedef struct __REGTIMER
{
	ARMREG TIMER_LOAD;
	ARMREG TIMER_VALUE;
	ARMREG TIMER_CTRL;
	ARMREG TIMER_CLEAR;
} REGTIMER,*PREGTIMER;

#define PROCESSORCLK 30000000

VOID InitIntctrl(VOID);
UINT32 GetIntctrlStatus(VOID);
VOID EnableIntctrlIRQ(UINT32 IrqVect);
VOID DisableIntctrlIRQ(UINT32 IrqVect);
VOID SoftIntctrlIRQ(UINT32 IrqVect);

VOID SetTimer1Interval(UINT32 ms);
VOID EnableTimer1(VOID);
VOID EnableTimer2(VOID);

#endif /* __ARMULATOR_H__ */

